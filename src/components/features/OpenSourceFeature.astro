---
import { Image } from "astro:assets";
import FeatureLayout from "../../layouts/FeatureLayout.astro";
import { Octokit } from "@octokit/rest";
import InfiniteCarousel from "../InfiniteCarousel.astro";

const octokit = new Octokit();
// const repoResponse = await octokit.repos.get({
//   owner: "Pan4ur",
//   repo: "ThunderHack-Recode",
// });
// const starsCount = repoResponse.data.stargazers_count;

const contributorsResponse = await octokit.repos.listContributors({
  owner: "Pan4ur",
  repo: "ThunderHack-Recode",
});

console.log("LOL");
const contributors = new Map<string, string>();
contributorsResponse.data.forEach((contributor) => {
  contributor.url != null
    ? (contributors[contributor.url] = contributor.avatar_url)
    : null;
});

const contributorsCount = 100;
const starsCount = 1000;
---

<FeatureLayout animation={1} client:visible>
  <li class="mr-20 ml-20 mt-20">
    <div>
      <Image
        src="/images/github.svg"
        alt=""
        width={100}
        height={100}
        class="absolute top-10 hover:animate-bounce"
      />
      <div class="flex justify-center text-center">
        <Image
          src="/images/star.svg"
          alt=""
          width={50}
          height={50}
          class="hover:animate-[bounce_1s_ease-in-out_3s]"
        />
        <p>stars <span max={starsCount}>0</span></p>

        <InfiniteCarousel items={contributors} />
      </div>
      <p>{contributorsCount}</p>
    </div>
  </li>
  <h2>Opensource</h2>
</FeatureLayout>

<script>
  const counters = document.querySelectorAll("span");
  const speed = 10000;

  counters.forEach((counter) => {
    const animate = () => {
      const value = +(counter.getAttribute("max") ?? "1");
      const data = +counter.innerText;

      const time = value / speed;
      if (data < value) {
        counter.innerText = Math.ceil(data + time).toString();
        setTimeout(animate, 1);
      } else {
        counter.innerText = value.toString();
      }
    };

    let style = window.getComputedStyle(counter);

    if (style.display != "none") animate();
  });
</script>

<style>
  p {
    background: var(--gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-size: 20px;
    font-style: oblique;
    font-weight: bold;
    text-transform: uppercase;
  }

  li {
    list-style: none;
    display: flex;
    padding: 1px;
    background-color: var(--primary-black);
    background-size: 400%;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  }

  li > div {
    text-decoration: none;
    line-height: 1.4;
    padding: calc(1.5rem - 1px);
    color: white;
    background-color: var(--primary-black);
    opacity: 0.8;
  }

  p {
    margin-top: 0.5rem;
    margin-bottom: 0;
  }

  li:is(:hover, :focus-within) {
    background-position: 0;
    background-image: var(--gradient);
  }

  li:is(:hover, :focus-within) h2 {
    background: var(--gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
</style>
